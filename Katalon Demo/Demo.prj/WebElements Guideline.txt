/********************************* HEADER PART **********************************
 *
 * CUSTOM KEYWORDS NAME		: WebElements.java
 * LAST UPDATED     		: Nov 19, 2018
 *
 * CUSTOM KEYWORDS LIST
 *
 * *********** General ***********
 *  waitForPresent(String strXpath, int iTimeOut): Get existing of element by Xpath
 *	generateTestObject(String xpath): Generate dynamic object by XPath
 *	convertToWebElement(TestObject to): convert TestObject to WebElement
 *  verifyExistingByXpath(String strXpath, int iTimeOut, Boolean existing): Verify existing element by XPath
 *	verifyElementColor(TestObject to, String attributeValue, String expectedColor): Verify Element color
 *	clickSelenium(TestObject to, String clickType='click'): Click on element by Selenium
 *	clickMousePosition(TestObject to, int x=10, int y=10, String clickType='click'): Click Mouse Position
 *	clickJS(TestObject to, String clickType='click'): Click element by java script
 *	executeJavaScript(TestObject to, String method): Execute java script
 *	getAttributeByJS(TestObject to, String fullPathNode): Get attribute by java script
 *	verifyAttributeByJS(TestObject to, String fullPathNode, String expectedValue): Verify attribute by java script
 *	*********** Date Time ***********
 *	setDate(String strName, String strDay, String strMonth, String strYear): Set Date element value
 *	getDate(String strName): Get Date element value
 *	verifyDateValue(String strName, String expectedDay, String expectedMonth, String expectedYear): Verify Date element value
 *	setTime(String strName, String strHour, String strMinute): Set Time element value
 *	getTime(String strName): Get Date element value
 *	verifyTimeValue(String strName, String expectedHour, String expectedMinute): Verify Date element value
 *	*********** List ***********
 *	getListAttributeValues(TestObject objList, String attributeName): Get list attribute values on list
 *  verifyListAttributeValues(TestObject objList, String attributeName, List<String> expectedListValues): : Verify list attribute values on list
 *	findItemIndexOnListByAttribute(TestObject objList, String attributeName, String attributeValue): Find item index on list by attribute
 *  verifyItemExistingOnListByAttribute(TestObject objList, String attributeName, String expectedValue, Boolean existing): Verify item existing on list
 *	selectListItemByIndex(TestObject objList, int index): Select list item by index
 *	selectListItemByText(TestObject objList, String text): Select list item by text
 *	countItemsOnList(TestObject objList): Count item on List
 *	getAttributeItemIndexOnList(TestObject objList, String attributeName, int index): Get attribute item at index on List
 *	*********** Table ***********
 *	countColumns(TestObject objTable): Count columns number
 *	countRows(TestObject objTable): Count rows number
 * 	getListHeaderColumns(TestObject objTable): Get list header column values on Table
 * 	verifyHeaderColumnExisting(TestObject objTable, String headerName, int iTimeOut, Boolean existing): Verify header column existing on Table
 * 	selectHeaderColumn(TestObject objTable, String headerName): Select header column existing on Table
 *	setCheckboxOnCell(TestObject objTable, int row, int column, boolean status=true): Select checkbox on cell
 *	verifyCheckboxStatusOnCell(TestObject objTable, int row, int column, boolean expectedStatus=true):  Verify checkbox status on cell
 *	selectOptionByLabelOnCell(TestObject objTable, int row, int column, String text): Select item by label on cell
 *	selectOptionByIndexOnCell(TestObject objTable, int row, int column, String rangeIndex): Select item by range index on cell
 *	clickOnCell(TestObject objTable, int row, int column): Click on cell
 *  verifyItemExistingOnColumnByAttribute(TestObject objTable, int column, String attributeName, String expectedValue, int iTimeOut, Boolean existing): Verify item existing on column by attribute
 *	getTextContentOnCell(TestObject objTable, int row, int column): Get text value on cell
 *	verifyTextContentOnColumn(TestObject objTable, int column, String expectedText, boolean existing): Verify text value on column
 *	verifyTextContentOnTable(TestObject objTable, String expectedText, boolean existing): Verify text value on table
 *	getAttributeValueOnCell(TestObject objTable, int row, int column, String attributeName): Get attribute value on cell
 *	verifyAttributeValueOnCell(TestObject objTable, int row, int column, String attributeName, String expectedValue): Verify attribute value on cell
 *	getListAttributeValuesAtColumn(TestObject objTable, int column, String attributeName): Get list Attribute values at column
 * 	*********** Menu ***********
 * 	selectMenu(String menuNodes, String delimiter): Select menu items
 */

/*////////////////////////////////// How to using JAR libralry ///////////////////////////////////////////
1. Copy kms.WebElements.jar to folder <current Katalon Project>/Drivers
2. Script example :
	import kms.WebElements

	WebElements WebApp = new WebElements()
	
	WebApp.selectMenu("WorkBench>Compliance")
	WebApp.setCheckboxOnCell(findTestObject('WEB/tbl_Table'), 5, 4)
	WebApp.selectListItemByText(findTestObject('WEB/lst_List'), 'ItemValue')
	WebApp.selectListItemByIndex(findTestObject('WEB/lst_List'), 2)
/////////////////////////////////////////////////////////////////////////////////////////////////////////*



    ////////////////////////// General /////////////////////////
	/******************************************************
     * Get existing of element by Xpath
     * @param xpath : String of xpath to find element
     * @return The existing status
     */
    public boolean waitForPresent(String strXpath, int iTimeOut)

    /******************************************************
     * Generate dynamic object by XPath
     * @param xpath : String of xpath to find element
     * @return The Dynamic object
     */
    public TestObject generateTestObject(String xpath)

    /******************************************************
     * convert TestObject to WebElement
     * @param to: The object to do
     * @return The WebElement object
     */
    public WebElement convertToWebElement(TestObject to)

    /******************************************************
     * Verify existing element by XPath
     * @param strXpath : String of xpath to find element
     * @param iTimeOut : The second time out to wait
     * @param existing : true (exist) / false (no exist)
     * @return None
     */
    public void verifyExistingByXpath(String strXpath, int iTimeOut, Boolean existing)

    /******************************************************
     * Verify Element color
     * @param to : The object to do
     * @param attributeName : the attribute name of element: color; border-left-color; background-color
     * @param expectedColor : the expected color (Ex: #ffffff)
     * @return None
     */
    public void verifyElementColor(TestObject to, String attributeName, String expectedColor)

    /******************************************************
     * Click on element by Selenium
     * @param to: The object to do
     * @param clickType: click; doubleClick; rightClick; mouseOver
     * @return None
     */
    public void click(TestObject to, String clickType)

    /******************************************************
     * Click Mouse Position
     * @param to: The object to do
     * @param x: The x position on object
     * @param y: The y position on object
     * @param clickType: click; doubleClick; rightClick; mouseOver
     * @return None
     */
    public void clickMousePosition(TestObject to, int x, int y, String clickType)

    /******************************************************
     * Click element by java script
     * @param to: The object to do
     * @param clickType: click; doubleClick; rightClick; mouseOver; scroll
     * @return None
     */
    public void clickJS(TestObject to, String clickType)

    /******************************************************
     * Execute java script
     * @param to: The object to do
     * @param method: The method to execute: click(); scrollIntoView()
     * @return None
     */
    public void executeJavaScript(TestObject to, String method)

    /******************************************************
     * Get attribute by java script
     * @param to: The object to do
     * @param fullPathNode: The full path node to get value (form.classList.value)
     * @return The attribute value
     */
    public String getAttributeByJS(TestObject to, String fullPathNode)

    /******************************************************
     * Verify attribute by java script
     * @param to: The object to do
     * @param fullPathNode: The full path node to get value (options[1].selectedIndex.text)
     * @param expectedValue: The expected value
     * @return The attribute value
     */
    public void verifyAttributeByJS(TestObject to, String fullPathNode, String expectedValue)

    ////////////////////////// Date Time /////////////////////////

    /******************************************************
     * Set Date element value
     * @param strName: The label name
     * @param strDay: The number day text: 01;02;....;31
     * @param strMonth: The number month text: 01;02;....;12
     * @param strYear: The number year text: 2015;2016;....;2019
     * @return None
     */
    public void setDate(String strName, String strDay, String strMonth, String strYear)

    /******************************************************
     * Get Date element value
     * @param strName: The label name
     * @return The current date as : DD-MM-YYYY
     */
    public String getDate(String strName)
	
    /******************************************************
     * Verify Date element value
     * @param strName: The label name
     * @param expectedDay: The expected number day: 01;02;....;31
     * @param expectedMonth: The expected number month: 01;02;....;12
     * @param expectedYear: The expected number year: 2015;2016;....;2019
     * @return None
     */
    public void verifyDateValue(String strName, String expectedDay, String expectedMonth, String expectedYear)

    /******************************************************
     * Set Time element value
     * @param strName: The label name
     * @param strHour: The number hour text: 00;02;....;23
     * @param strMinute: The number minute text: 00;02;....;59
     * @return None
     */
    public void setTime(String strName, String strHour, String strMinute)

    /******************************************************
     * Get Date element value
     * @param strName: The label name
     * @return The current time as : HH:MM
     */
    public String getTime(String strName)

    /******************************************************
     * Verify Date element value
     * @param strName: The label name
     * @param expectedHour: The expected hour text: 00;02;....;23
     * @param expectedMinute: The expected minute text: 00;02;....;59
     * @return None
     */
    public void verifyTimeValue(String strName, String expectedHour, String expectedMinute)

    ////////////////////////// List /////////////////////////
    /******************************************************
     * Get list attribute values on list
     * @param objList: The List object
     * @param attributeName: The attribute name to get
     * @return The list attribute values
     */
    public List<String> getListAttributeValues(TestObject objList, String attributeName)

    /******************************************************
     * Verify list attribute values on list
     * @param objList: The List object
     * @param attributeName: The attribute name to get
     * @param expectedListValues: The expected list values
     * @return None
     */
    public void verifyListAttributeValues(TestObject objList, String attributeName, List<String> expectedListValues){

    /******************************************************
     * Find item index on list by attribute
     * @param objList: The List object
     * @param attributeName: The attribute name to find
     * @param attributeValue: The attribute value to find
     * @return The list attribute value
     */
    public int findItemIndexOnListByAttribute(TestObject objList, String attributeName, String attributeValue)

    /******************************************************
     * Verify item existing on list
     * @param objList: The List object
     * @param attributeName: The attribute name to get
     * @param expectedValue: The expected value
     * @param iTimeOut : The second time out to wait
     * @param existing: true (exist); false (no exist)
     * @return None
     */
    public void verifyItemExistingOnListByAttribute(TestObject objList, String attributeName, String expectedValue, int iTimeOut, Boolean existing)

    /******************************************************
     * Select list item by index
     * @param objList: The List Test object
     * @param index: The index to select
     * @return None
     */
    public void selectListItemByIndex(TestObject objList, int index)

    /******************************************************
     * Select list item by text
     * @param objList: The List Test object
     * @param text: The text of item to select
     * @return None
     */
    public void selectListItemByText(TestObject objList, String text)

    /******************************************************
     * Count item on List
     * @param objList: The List Test object
     * @return The total number of items
     */
    public int countItemsOnList(TestObject objList)

    /******************************************************
     * Get attribute item at index on List
     * @param objList: The List Test object
     * @param attributeName: The attribute name to get
     * @param index: The index to select
     * @return None
     */
    public String getAttributeItemIndexOnList(TestObject objList, String attributeName, int index)

    ////////////////////////// Table //////////////////////////
    /******************************************************
     * Count columns number
     * @param objTable: The Table object
     * @return The total number of columns
     */
    public int countColumns(TestObject objTable)

    /******************************************************
     * Count rows number
     * @param objTable: The Table object
     * @return The total number of rows
     */
    public int countRows(TestObject objTable)

    /******************************************************
     * Get list header column values on Table
     * @param objTable: The Table object
     * @return The list header column values
     */
    public List<String> getListHeaderColumns(TestObject objTable)

    /******************************************************
     * Verify header column existing on Table
     * @param objTable: The Table object
     * @param headerName: The header column name
     * @param iTimeOut : The second time out to wait
     * @param existing: true (exist); false (no exist)
     * @return None
     */
    public void verifyHeaderColumnExisting(TestObject objTable, String headerName, int iTimeOut, Boolean existing)

    /******************************************************
     * Select header column existing on Table
     * @param objTable: The Table object
     * @param headerName: The header or index number
     * @return None
     */
    public void selectHeaderColumn(TestObject objTable, String headerName)

    /******************************************************
     * Select checkbox on cell
     * @param objTable: The Table object
     * @param row: The row index on Table
     * @param column: The column index on Table
     * @param status: The status : true(check)/ false(uncheck)
     * @return None
     */
    public void setCheckboxOnCell(TestObject objTable, int row, int column, Boolean status)

    /******************************************************
     * Verify checkbox status on cell
     * @param objTable: The Table object
     * @param row: The row index on Table
     * @param column: The column index on Table
     * @param expectedStatus: The expected status : true(check)/ false(uncheck)
     * @return None
     */
    public void verifyCheckboxStatusOnCell(TestObject objTable, int row, int column, Boolean expectedStatus)

    /******************************************************
     * Set text on cell
     * @param objTable: The Table object
     * @param row: The row index on Table
     * @param column: The column index on Table
     * @param text: The text to set on cell
     * @return None
     */
    public void setTextOnCell(TestObject objTable, int row, int column, String text)

    /******************************************************
     * Select item by label on cell
     * @param objTable: The Table object
     * @param row: The row index on Table
     * @param column: The column index on Table
     * @param text: The text item to select on cell
     * @return None
     */
    public void selectOptionByLabelOnCell(TestObject objTable, int row, int column, String text)

    /******************************************************
     * Select item by range index on cell
     * @param objTable: The Table object
     * @param row: The row index on Table
     * @param column: The column index on Table
     * @param index: The item index to select on cell
     * @return None
     */
    public void selectOptionByIndexOnCell(TestObject objTable, int row, int column, int index)
	
    /******************************************************
     * Click on cell
     * @param objTable: The Table object
     * @param row: The row index on Table
     * @param column: The column index on Table
     * @return The attribute value
     */
    public void clickOnCell(TestObject objTable, int row, int column)

    /******************************************************
     * Verify item existing on column by attribute
     * @param objTable: The Table object
     * @param column: The column index on Table
     * @param attributeName: The attribute name
     * @param expectedValue: The expected value
     * @param iTimeOut : The second time out to wait
     * @param existing: true(exist) /false (not exist)
     * @return None
     */
    public void verifyItemExistingOnColumnByAttribute(TestObject objTable, int column, String attributeName, String expectedValue, int iTimeOut, Boolean existing)

    /******************************************************
     * Get text value on cell
     * @param objTable: The Table object
     * @param row: The row index on Table
     * @param column: The column index on Table
     * @return The text value of cell
     */
    public String getTextContentOnCell(TestObject objTable, int row, int column)
    /******************************************************
     * Verify text value on column
     * @param objTable: The Table object
     * @param column: The column index on Table
     * @param expectedText: The text on cell
     * @param iTimeOut : The second time out to wait
     * @param existing: true(exist) /false (not exist)
     * @return None
     */
    public void verifyTextContentOnColumn(TestObject objTable, int column, String expectedText, int iTimeOut, Boolean existing)
    /******************************************************
     * Verify text value on table
     * @param objTable: The Table object
     * @param expectedText: The text on cell
     * @param iTimeOut : The second time out to wait
     * @param existing: true(exist) /false (not exist)
     * @return None
     */
    public void verifyTextContentOnTable(TestObject objTable, String expectedText, int iTimeOut, Boolean existing)

    /******************************************************
     * Get attribute value on cell
     * @param objTable: The Table object
     * @param row: The row index on Table
     * @param column: The column index on Table
     * @param attributeName: The attribute name to get
     * @return The attribute value
     */
    public String getAttributeValueOnCell(TestObject objTable, int row, int column, String attributeName)

    /******************************************************
     * Verify attribute value on cell
     * @param objTable: The Table object
     * @param row: The row index on Table
     * @param column: The column index on Tablee
     * @param attributeName: The attribute name to verify
     * @param expectedValue: The expected attribute value to verify
     * @return None
     */
    public void verifyAttributeValueOnCell(TestObject objTable, int row, int column, String attributeName, String expectedValue)
	
    /******************************************************
     * Get list Attribute values at column
     * @param objTable: The Table object
     * @param column: The column index on Table
     * @param attributeName: The attribute name to get
     * @return The list Attribute values on cell
     */
    public List<String> getListAttributeValuesAtColumn(TestObject objTable, int column, String attributeName)

    /******************************************************
     * Get list text content values at column
     * @param objTable: The Table object
     * @param column: The column index on Table
     * @return The list text content values
     */
    public List<String> getListTextContentAtColumn(TestObject objTable, int column)
	
    ////////////////////////// Menu //////////////////////////
    /******************************************************
     * Select menu items
     * @param menuNodes: The menu node to select (Ex: Reports>Site History>FUELWATCH)
     * @param delimiter: The delimiter text to slipt menu (Ex: ">")
     * @return None
     */
    public void selectMenu(String menuNodes, String delimiter)